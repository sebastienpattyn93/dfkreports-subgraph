// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCancelled extends ethereum.Event {
  get params(): AuctionCancelled__Params {
    return new AuctionCancelled__Params(this);
  }
}

export class AuctionCancelled__Params {
  _event: AuctionCancelled;

  constructor(event: AuctionCancelled) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get startingPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endingPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class AuctionSuccessful extends ethereum.Event {
  get params(): AuctionSuccessful__Params {
    return new AuctionSuccessful__Params(this);
  }
}

export class AuctionSuccessful__Params {
  _event: AuctionSuccessful;

  constructor(event: AuctionSuccessful) {
    this._event = event;
  }

  get auctionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SaleAuction__getAuctionResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class SaleAuction extends ethereum.SmartContract {
  static bind(address: Address): SaleAuction {
    return new SaleAuction("SaleAuction", address);
  }

  assistingAuction(): Address {
    let result = super.call(
      "assistingAuction",
      "assistingAuction():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_assistingAuction(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assistingAuction",
      "assistingAuction():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctionHeroCore(): Address {
    let result = super.call(
      "auctionHeroCore",
      "auctionHeroCore():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_auctionHeroCore(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "auctionHeroCore",
      "auctionHeroCore():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAuction(_tokenId: BigInt): SaleAuction__getAuctionResult {
    let result = super.call(
      "getAuction",
      "getAuction(uint256):(uint256,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new SaleAuction__getAuctionResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getAuction(
    _tokenId: BigInt
  ): ethereum.CallResult<SaleAuction__getAuctionResult> {
    let result = super.tryCall(
      "getAuction",
      "getAuction(uint256):(uint256,address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SaleAuction__getAuctionResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getCurrentPrice(_tokenId: BigInt): BigInt {
    let result = super.call(
      "getCurrentPrice",
      "getCurrentPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toBigInt();
  }

  try_getCurrentPrice(_tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentPrice",
      "getCurrentPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserAuctions(_address: Address): Array<BigInt> {
    let result = super.call(
      "getUserAuctions",
      "getUserAuctions(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getUserAuctions(_address: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserAuctions",
      "getUserAuctions(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isOnAuction(_tokenId: BigInt): boolean {
    let result = super.call("isOnAuction", "isOnAuction(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isOnAuction(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOnAuction", "isOnAuction(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  jewelToken(): Address {
    let result = super.call("jewelToken", "jewelToken():(address)", []);

    return result[0].toAddress();
  }

  try_jewelToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("jewelToken", "jewelToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxPrice(): BigInt {
    let result = super.call("maxPrice", "maxPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxPrice", "maxPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minPrice(): BigInt {
    let result = super.call("minPrice", "minPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minPrice", "minPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerCut(): BigInt {
    let result = super.call("ownerCut", "ownerCut():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ownerCut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ownerCut", "ownerCut():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userAuctions(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userAuctions",
      "userAuctions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userAuctions(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userAuctions",
      "userAuctions(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _heroCoreAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _jewelAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _cut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _assistingAuctionAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bidAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }
}

export class CancelAuctionWhenPausedCall extends ethereum.Call {
  get inputs(): CancelAuctionWhenPausedCall__Inputs {
    return new CancelAuctionWhenPausedCall__Inputs(this);
  }

  get outputs(): CancelAuctionWhenPausedCall__Outputs {
    return new CancelAuctionWhenPausedCall__Outputs(this);
  }
}

export class CancelAuctionWhenPausedCall__Inputs {
  _call: CancelAuctionWhenPausedCall;

  constructor(call: CancelAuctionWhenPausedCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelAuctionWhenPausedCall__Outputs {
  _call: CancelAuctionWhenPausedCall;

  constructor(call: CancelAuctionWhenPausedCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _startingPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _endingPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _winner(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }
}

export class IsOnAuctionCall extends ethereum.Call {
  get inputs(): IsOnAuctionCall__Inputs {
    return new IsOnAuctionCall__Inputs(this);
  }

  get outputs(): IsOnAuctionCall__Outputs {
    return new IsOnAuctionCall__Outputs(this);
  }
}

export class IsOnAuctionCall__Inputs {
  _call: IsOnAuctionCall;

  constructor(call: IsOnAuctionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IsOnAuctionCall__Outputs {
  _call: IsOnAuctionCall;

  constructor(call: IsOnAuctionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _feeAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _feePercents(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class SetLimitsCall extends ethereum.Call {
  get inputs(): SetLimitsCall__Inputs {
    return new SetLimitsCall__Inputs(this);
  }

  get outputs(): SetLimitsCall__Outputs {
    return new SetLimitsCall__Outputs(this);
  }
}

export class SetLimitsCall__Inputs {
  _call: SetLimitsCall;

  constructor(call: SetLimitsCall) {
    this._call = call;
  }

  get _min(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLimitsCall__Outputs {
  _call: SetLimitsCall;

  constructor(call: SetLimitsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
